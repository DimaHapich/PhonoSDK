<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" initialize="initLogging()" invoke="invokeHandler(event)" closing="closingHandler(event)" creationComplete="initLogging()">

	<fx:Script>
		<![CDATA[
			import com.voxeo.phono.Call;
			import com.voxeo.phono.Factory;
			import com.voxeo.phono.Phone;
			import com.voxeo.phono.events.CallEvent;
			import com.voxeo.phono.events.MessageEvent;
			import com.voxeo.phono.events.PhoneEvent;
			import com.voxeo.phono.impl.xmpp.jingle.JinglePhone;
			
			import flash.utils.clearTimeout;
			import flash.utils.setInterval;
			
			import mx.collaboration.xmpp.protocol.extensions.Bind;
			import mx.collections.ArrayCollection;
			import mx.logging.*;
			import mx.logging.targets.*;
			
			[Bindable]
			public var jinglePhone:JinglePhone = Factory.createPhone();
			public var call:Call;
			
			[Bindable]
			private var gateway:String;
			[Bindable]
			private var preDialDelay: Number = 0;
			[Bindable]
			private var dialUri:String;
			[Bindable]
			private var postAnswerDelay:Number = 0;
			
			[Bindable]
			public var myData:ArrayCollection;
			
			private var preDialProcess:Number;
			private var postAnswerProcess:Number;
			
			private function initLogging():void {
				// Create a target
				var logTarget:TraceTarget = new TraceTarget();
				
				// Log only messages for the classes in the mx.rpc.* and mx.messaging packages.
				logTarget.filters=["mx.rpc.*", "mx.messaging.*", "com.voxeo.*"];
				
				// Log all log levels.
				logTarget.level = LogEventLevel.ALL;
				
				// Add date, time, category, and log level to the output.
				logTarget.includeDate = true;
				logTarget.includeTime = true;
				logTarget.includeCategory = true;
				logTarget.includeLevel = true;
				
				// Begin logging.
				Log.addTarget(logTarget);
			}
			
			protected function invokeHandler(event:InvokeEvent):void
			{	
				var arguments:Array = event.arguments;
				for (var i:int=0; i<arguments.length; i++) {
					var temp:String = arguments[i];
					var tempIndex:int = temp.search("=");
					var key:String = temp.substring(0, tempIndex);
					var value:String = temp.substring(tempIndex+1);
					if (key == "gateway") {
						gateway = value;
					}
					else if (key == "pre-dial-delay") {
						preDialDelay = Number(value) * 1000;
					}
					else if (key == "dial-uri") {
						dialUri = value;
					}
					else if (key == "post-answer-delay") {
						postAnswerDelay = Number(value) * 1000;	
					}
				}
				createConnection(this.gateway, "", "");
			}
			
			protected function createConnection(gateway:String, username:String, password:String): void {
				try
				{
					jinglePhone.connect(gateway, username, password);
					jinglePhone.addEventListener(PhoneEvent.CONNECTED, function(phoneEvent:PhoneEvent): void {
						if (this.preDialDelay == 0) {
							createCall(phoneEvent);
						} else {
							preDialProcess = setTimeout(function() {
								try {
									createCall(phoneEvent);
								} catch (err: Error) {
									Log.getLogger("com.voxeo.phono.sample").info("createCallDelayFunction error occurred...");
								}
							}, preDialDelay, "");
						}
					});
					
					jinglePhone.addEventListener(PhoneEvent.ERROR, function(event:PhoneEvent): void {
						trace(event.reason);
						event.stopPropagation();
						if (jinglePhone.connected) {
							jinglePhone.disconnect();
						}
					});
					
					jinglePhone.addEventListener(PhoneEvent.REASON_SOCKET, function(event:PhoneEvent): void {
						trace(event.reason);
						event.stopPropagation();
						if (jinglePhone.connected) {
							jinglePhone.disconnect();
						}
					});
					
					jinglePhone.addEventListener(PhoneEvent.DISCONNECTED, function(event:PhoneEvent): void {
						trace("PHONE DISCONNECT CLOSE WINDOWS");
						NativeApplication.nativeApplication.exit();
					});
				}
				catch(event:Event) 
				{
					event.stopPropagation();
					if(jinglePhone.connected) {
						jinglePhone.disconnect();
					}
				} catch (err:Error) {
					Log.getLogger("com.voxeo.phono.sample").info(err.getStackTrace());
					trace(err.getStackTrace());
					if (jinglePhone.connected) {
						jinglePhone.disconnect();
					}
					clearTimeout(preDialProcess);
					clearTimeout(postAnswerProcess);
					this.close();
				}
			}
			
			protected function createCall(phoneEvent:PhoneEvent): void {
				try {
						try {
							call = phoneEvent.phone.dial(dialUri);
						} catch (err:Error) {
							trace(err.getStackTrace());
							Log.getLogger("com.voxeo.phono.sample").info(err.getStackTrace());
							if (phoneEvent.phone.connected) {
								phoneEvent.phone.disconnect();
							}
							clearTimeout(preDialProcess);
							clearTimeout(postAnswerProcess);
						}
						
						call.addEventListener(CallEvent.CREATED, handleIncomingCallEvent);
						call.addEventListener(CallEvent.RINGING, handleRingingEvent);
						call.addEventListener(CallEvent.ANSWERED, handleAnswerEvent);
						call.addEventListener(CallEvent.HANGUP, handleHangupEvent);
						call.addEventListener(CallEvent.ERROR, handleCallErrorEvent);
				} catch (err: Error) {
					Log.getLogger("com.voxeo.phono.sample").info(err.getStackTrace());
					trace(err.getStackTrace());
					if (jinglePhone.connected) {
						jinglePhone.disconnect();
					}
					clearTimeout(preDialProcess);
					clearTimeout(postAnswerProcess);
				}
			}
			
			protected function handleRingingEvent(callEvent:CallEvent): void {
				
			}
			
			protected function handleIncomingCallEvent(callEvent:CallEvent): void {
				try {
					if (callEvent.call != null) {
						callEvent.call.answer();
					}
				} catch (err: Error) {
					trace(err.getStackTrace());
					disconnect(callEvent, err);
				}
			}
			
			protected function handleAnswerEvent(callEvent:CallEvent): void {
				try {
					if (this.postAnswerDelay == 0) {
						callEvent.call.hangup();
					} 
					else {
//						postAnswerProcess = setTimeout(handleHangupEvent, postAnswerDelay, "");
						postAnswerProcess = setTimeout(function() {
							handleHangupEvent(callEvent);
						}, 5000, "");
					}
				} catch (err:Error) {
					trace(err.getStackTrace());
					disconnect(callEvent, err);
				}
			}
			
			protected function handleCallErrorEvent(callEvent:CallEvent): void {
				try {
					Log.getLogger("com.voxeo.prism").info("Handle Call Error Event: ", callEvent.reason);
					callEvent.stopImmediatePropagation();
					callEvent.stopPropagation();
					callEvent.phone.disconnect();
					this.close();
				} catch (err:Error) {
					trace(err.getStackTrace());
					disconnect(callEvent, err);
				}
			}
			
			protected function handleHangupEvent(callEvent:CallEvent): void {
				try {
					Log.getLogger("com.voxeo.prism").info("Call hang up......");
					callEvent.call.hangup();
				
					Log.getLogger("com.voxeo.prism").info("Phone disconnect......");
					disconnect(callEvent, null);
				} catch (err:Error) {
					trace(err.getStackTrace());
					disconnect(callEvent, err);
				}
			}
			
			protected function disconnect(callEvent:CallEvent, err:Error):void {
				if (err != null) {
					trace(err.getStackTrace());
					Log.getLogger("com.voxeo.prism").info(err.getStackTrace());
				}
				try {
					if (callEvent.phone != null && callEvent.phone.connected) {
						callEvent.phone.disconnect();
					}
					clearTimeout(preDialProcess);
					clearTimeout(postAnswerProcess);
					} catch (err:Error) {
						trace(err.getStackTrace());
					}
				
				trace("DONE...Close Windows...");
				NativeApplication.nativeApplication.exit();
			}
			
			protected function closingHandler(event:Event):void
			{
				try {
					clearTimeout(preDialProcess);
					clearTimeout(postAnswerProcess);
					if (jinglePhone.connected) {
						jinglePhone.disconnect();
					}
				} catch (err:Error) {
					trace(err.getStackTrace());
				}

//				NativeApplication.nativeApplication.exit();
//				trace("DONE...Close Windows...");
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<!--s:TextArea id="logText" left="10" right="10" top="105" bottom="10" /-->
</s:WindowedApplication>
